package net.fly78.miniSQL.javaccform;

/* Generated By:JavaCC: Do not edit this line. FormsPlSqlConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FormsPlSqlConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int K_ALL = 5;
  /** RegularExpression Id. */
  int K_AND = 6;
  /** RegularExpression Id. */
  int K_ANY = 7;
  /** RegularExpression Id. */
  int K_AS = 8;
  /** RegularExpression Id. */
  int K_ASC = 9;
  /** RegularExpression Id. */
  int K_BEGIN = 10;
  /** RegularExpression Id. */
  int K_BETWEEN = 11;
  /** RegularExpression Id. */
  int K_BINARY_INTEGER = 12;
  /** RegularExpression Id. */
  int K_BOOLEAN = 13;
  /** RegularExpression Id. */
  int K_BY = 14;
  /** RegularExpression Id. */
  int K_CHAR = 15;
  /** RegularExpression Id. */
  int K_CLOSE = 16;
  /** RegularExpression Id. */
  int K_COMMENT = 17;
  /** RegularExpression Id. */
  int K_COMMIT = 18;
  /** RegularExpression Id. */
  int K_CONNECT = 19;
  /** RegularExpression Id. */
  int K_CONSTANT = 20;
  /** RegularExpression Id. */
  int K_CURRENT = 21;
  /** RegularExpression Id. */
  int K_CURSOR = 22;
  /** RegularExpression Id. */
  int K_DATE = 23;
  /** RegularExpression Id. */
  int K_DECIMAL = 24;
  /** RegularExpression Id. */
  int K_DECLARE = 25;
  /** RegularExpression Id. */
  int K_DEFAULT = 26;
  /** RegularExpression Id. */
  int K_DELETE = 27;
  /** RegularExpression Id. */
  int K_DESC = 28;
  /** RegularExpression Id. */
  int K_DISTINCT = 29;
  /** RegularExpression Id. */
  int K_DO = 30;
  /** RegularExpression Id. */
  int K_ELSE = 31;
  /** RegularExpression Id. */
  int K_ELSIF = 32;
  /** RegularExpression Id. */
  int K_END = 33;
  /** RegularExpression Id. */
  int K_EXCEPTION = 34;
  /** RegularExpression Id. */
  int K_EXCEPTION_INIT = 35;
  /** RegularExpression Id. */
  int K_EXCLUSIVE = 36;
  /** RegularExpression Id. */
  int K_EXISTS = 37;
  /** RegularExpression Id. */
  int K_EXIT = 38;
  /** RegularExpression Id. */
  int K_FETCH = 39;
  /** RegularExpression Id. */
  int K_FLOAT = 40;
  /** RegularExpression Id. */
  int K_FOR = 41;
  /** RegularExpression Id. */
  int K_FROM = 42;
  /** RegularExpression Id. */
  int K_FUNCTION = 43;
  /** RegularExpression Id. */
  int K_GOTO = 44;
  /** RegularExpression Id. */
  int K_GROUP = 45;
  /** RegularExpression Id. */
  int K_HAVING = 46;
  /** RegularExpression Id. */
  int K_IF = 47;
  /** RegularExpression Id. */
  int K_IN = 48;
  /** RegularExpression Id. */
  int K_INDEX = 49;
  /** RegularExpression Id. */
  int K_INSERT = 50;
  /** RegularExpression Id. */
  int K_INTEGER = 51;
  /** RegularExpression Id. */
  int K_INTERSECT = 52;
  /** RegularExpression Id. */
  int K_INTO = 53;
  /** RegularExpression Id. */
  int K_IS = 54;
  /** RegularExpression Id. */
  int K_LEVEL = 55;
  /** RegularExpression Id. */
  int K_LIKE = 56;
  /** RegularExpression Id. */
  int K_LOCK = 57;
  /** RegularExpression Id. */
  int K_LOOP = 58;
  /** RegularExpression Id. */
  int K_MINUS = 59;
  /** RegularExpression Id. */
  int K_MODE = 60;
  /** RegularExpression Id. */
  int K_NATURAL = 61;
  /** RegularExpression Id. */
  int K_NOT = 62;
  /** RegularExpression Id. */
  int K_NOWAIT = 63;
  /** RegularExpression Id. */
  int K_NULL = 64;
  /** RegularExpression Id. */
  int K_NUMBER = 65;
  /** RegularExpression Id. */
  int K_OF = 66;
  /** RegularExpression Id. */
  int K_ONLY = 67;
  /** RegularExpression Id. */
  int K_OPEN = 68;
  /** RegularExpression Id. */
  int K_OR = 69;
  /** RegularExpression Id. */
  int K_ORDER = 70;
  /** RegularExpression Id. */
  int K_OTHERS = 71;
  /** RegularExpression Id. */
  int K_OUT = 72;
  /** RegularExpression Id. */
  int K_PACKAGE = 73;
  /** RegularExpression Id. */
  int K_POSITIVE = 74;
  /** RegularExpression Id. */
  int K_PRAGMA = 75;
  /** RegularExpression Id. */
  int K_PRIOR = 76;
  /** RegularExpression Id. */
  int K_PROCEDURE = 77;
  /** RegularExpression Id. */
  int K_RAISE = 78;
  /** RegularExpression Id. */
  int K_READ = 79;
  /** RegularExpression Id. */
  int K_REAL = 80;
  /** RegularExpression Id. */
  int K_RECORD = 81;
  /** RegularExpression Id. */
  int K_REF = 82;
  /** RegularExpression Id. */
  int K_RETURN = 83;
  /** RegularExpression Id. */
  int K_REVERSE = 84;
  /** RegularExpression Id. */
  int K_ROLLBACK = 85;
  /** RegularExpression Id. */
  int K_ROW = 86;
  /** RegularExpression Id. */
  int K_SAVEPOINT = 87;
  /** RegularExpression Id. */
  int K_SEGMENT = 88;
  /** RegularExpression Id. */
  int K_SELECT = 89;
  /** RegularExpression Id. */
  int K_SET = 90;
  /** RegularExpression Id. */
  int K_SHARE = 91;
  /** RegularExpression Id. */
  int K_SMALLINT = 92;
  /** RegularExpression Id. */
  int K_SQL = 93;
  /** RegularExpression Id. */
  int K_START = 94;
  /** RegularExpression Id. */
  int K_TABLE = 95;
  /** RegularExpression Id. */
  int K_THEN = 96;
  /** RegularExpression Id. */
  int K_TO = 97;
  /** RegularExpression Id. */
  int K_TRANSACTION = 98;
  /** RegularExpression Id. */
  int K_UNION = 99;
  /** RegularExpression Id. */
  int K_UPDATE = 100;
  /** RegularExpression Id. */
  int K_USE = 101;
  /** RegularExpression Id. */
  int K_VALUES = 102;
  /** RegularExpression Id. */
  int K_VARCHAR2 = 103;
  /** RegularExpression Id. */
  int K_VARCHAR = 104;
  /** RegularExpression Id. */
  int K_WHEN = 105;
  /** RegularExpression Id. */
  int K_WHERE = 106;
  /** RegularExpression Id. */
  int K_WHILE = 107;
  /** RegularExpression Id. */
  int K_WITH = 108;
  /** RegularExpression Id. */
  int K_WORK = 109;
  /** RegularExpression Id. */
  int K_WRITE = 110;
  /** RegularExpression Id. */
  int S_NUMBER = 111;
  /** RegularExpression Id. */
  int FLOAT = 112;
  /** RegularExpression Id. */
  int INTEGER = 113;
  /** RegularExpression Id. */
  int DIGIT = 114;
  /** RegularExpression Id. */
  int LINE_COMMENT = 115;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 116;
  /** RegularExpression Id. */
  int S_IDENTIFIER = 117;
  /** RegularExpression Id. */
  int LETTER = 118;
  /** RegularExpression Id. */
  int SPECIAL_CHARS = 119;
  /** RegularExpression Id. */
  int S_BIND = 120;
  /** RegularExpression Id. */
  int S_CHAR_LITERAL = 121;
  /** RegularExpression Id. */
  int S_QUOTED_IDENTIFIER = 122;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"ALL\"",
    "\"AND\"",
    "\"ANY\"",
    "\"AS\"",
    "\"ASC\"",
    "\"BEGIN\"",
    "\"BETWEEN\"",
    "\"BINARY_INTEGER\"",
    "\"BOOLEAN\"",
    "\"BY\"",
    "\"CHAR\"",
    "\"CLOSE\"",
    "\"COMMENT\"",
    "\"COMMIT\"",
    "\"CONNECT\"",
    "\"CONSTANT\"",
    "\"CURRENT\"",
    "\"CURSOR\"",
    "\"DATE\"",
    "\"DECIMAL\"",
    "\"DECLARE\"",
    "\"DEFAULT\"",
    "\"DELETE\"",
    "\"DESC\"",
    "\"DISTINCT\"",
    "\"DO\"",
    "\"ELSE\"",
    "\"ELSIF\"",
    "\"END\"",
    "\"EXCEPTION\"",
    "\"EXCEPTION_INIT\"",
    "\"EXCLUSIVE\"",
    "\"EXISTS\"",
    "\"EXIT\"",
    "\"FETCH\"",
    "\"FLOAT\"",
    "\"FOR\"",
    "\"FROM\"",
    "\"FUNCTION\"",
    "\"GOTO\"",
    "\"GROUP\"",
    "\"HAVING\"",
    "\"IF\"",
    "\"IN\"",
    "\"INDEX\"",
    "\"INSERT\"",
    "\"INTEGER\"",
    "\"INTERSECT\"",
    "\"INTO\"",
    "\"IS\"",
    "\"LEVEL\"",
    "\"LIKE\"",
    "\"LOCK\"",
    "\"LOOP\"",
    "\"MINUS\"",
    "\"MODE\"",
    "\"NATURAL\"",
    "\"NOT\"",
    "\"NOWAIT\"",
    "\"NULL\"",
    "\"NUMBER\"",
    "\"OF\"",
    "\"ONLY\"",
    "\"OPEN\"",
    "\"OR\"",
    "\"ORDER\"",
    "\"OTHERS\"",
    "\"OUT\"",
    "\"PACKAGE\"",
    "\"POSITIVE\"",
    "\"PRAGMA\"",
    "\"PRIOR\"",
    "\"PROCEDURE\"",
    "\"RAISE\"",
    "\"READ\"",
    "\"REAL\"",
    "\"RECORD\"",
    "\"REF\"",
    "\"RETURN\"",
    "\"REVERSE\"",
    "\"ROLLBACK\"",
    "\"ROW\"",
    "\"SAVEPOINT\"",
    "\"SEGMENT\"",
    "\"SELECT\"",
    "\"SET\"",
    "\"SHARE\"",
    "\"SMALLINT\"",
    "\"SQL\"",
    "\"START\"",
    "\"TABLE\"",
    "\"THEN\"",
    "\"TO\"",
    "\"TRANSACTION\"",
    "\"UNION\"",
    "\"UPDATE\"",
    "\"USE\"",
    "\"VALUES\"",
    "\"VARCHAR2\"",
    "\"VARCHAR\"",
    "\"WHEN\"",
    "\"WHERE\"",
    "\"WHILE\"",
    "\"WITH\"",
    "\"WORK\"",
    "\"WRITE\"",
    "<S_NUMBER>",
    "<FLOAT>",
    "<INTEGER>",
    "<DIGIT>",
    "<LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<S_IDENTIFIER>",
    "<LETTER>",
    "<SPECIAL_CHARS>",
    "<S_BIND>",
    "<S_CHAR_LITERAL>",
    "<S_QUOTED_IDENTIFIER>",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\":=\"",
    "\"%TYPE\"",
    "\"%ROWTYPE\"",
    "\"<<\"",
    "\">>\"",
    "\".\"",
    "\"..\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"||\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"%FOUND\"",
    "\"%NOTFOUND\"",
    "\"%ISOPEN\"",
    "\"%ROWCOUNT\"",
    "\"!=\"",
    "\"#\"",
    "\"<>\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\".*\"",
  };

}
